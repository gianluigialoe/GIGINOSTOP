@model GIGINOSTOP.Models.DettaglioArticoloViewModel

@{
    ViewBag.Title = "Dettagli Articolo";
}

<div class="container">


    @if (Model != null && Model.Articolo != null)
    {
        <div class="row">
            <!-- Immagine a sinistra (su schermi larghi) -->
            <div class="col-lg-4 mb-3">
                <div class="image-container">
                    <img src="@Model.Articolo.immagine" alt="@Model.Articolo.nomearticolo" class="img-fluid">
                </div>
            </div>

            <!-- Descrizione a destra (su schermi larghi) -->
            <div class="col-lg-8 mb-3">
                <div class="details-container">
                    <h3>@Model.Articolo.nomearticolo</h3>
                    <p>@Model.Articolo.descrizione</p>

                    <!-- Form per l'aggiunta al carrello -->
                    @using (Html.BeginForm("AggiungiAlCarrello", "Carrello", FormMethod.Post, new { id = "aggiungiAlCarrelloForm" }))
                    {
                        @Html.Hidden("id", Model.Articolo.id)
                        <label for="quantita">Quantità:</label>
                        <input type="number" name="quantita" id="quantita" value="1" min="1" required class="form-control">
                        <button type="button" onclick="aggiungiAlCarrello()" class="btn btn-dark mt-3">
                            Aggiungi al Carrello
                        </button>
                    }
                    <!-- Mostra il prezzo -->
                    <!-- Mostra il prezzo -->
                    @if (Model.Articolo.in_offerta.HasValue && Model.Articolo.prezzo_offerta.HasValue)
                    {
                        <p class="card-text">
                            <del style="font-size: 18px;">Prezzo: @Model.Articolo.prezzo €</del><br>
                            <strong style="font-size: 20px;">Prezzo in offerta: @Model.Articolo.prezzo_offerta €</strong>
                        </p>
                    }
                    else
                    {
                        <p class="card-text" style="font-size: 18px;">Prezzo: @Model.Articolo.prezzo €</p>
                    }

                </div>
            </div>
        </div>



        <!-- Mostra recensioni e form per aggiungere recensione -->
        <div class="row mt-4">
            <div class="col-md-6">
                <h4>Recensioni</h4>
                <ul class="list-group">
                    @if (Model.Recensioni != null && Model.Recensioni.Any())
                    {
                        foreach (var recensione in Model.Recensioni)
                        {
                            <li class="list-group-item">
                                @if (recensione.Utenti != null)
                                {
                                    <p><strong>@recensione.Utenti.nome</strong> - @recensione.testo</p>
                                    <p>Punteggio:<br /> <span class="render-stars" data-score="@recensione.punteggio"></span></p>

                                    <!-- Mostra il bottone "Elimina" solo se l'utente autenticato è l'autore della recensione -->
                                    if (User.Identity.IsAuthenticated && recensione.idutente.ToString() == User.Identity.Name)
                                    {
                                        <form method="post" action="@Url.Action("EliminaRecensione", "Collezioni")" onsubmit="return confirm('Sei sicuro di voler eliminare questa recensione?');">
                                            @Html.Hidden("recensioneId", recensione.id)
                                            <button type="submit" class="btn btn-sm btn-danger">Elimina</button>
                                        </form>
                                    }
                                }
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item">Non ci sono recensioni per questo articolo.</li>
                    }
                </ul>
            </div>

            <div class="col-md-6 mt-4 mt-md-0">
                @if (User.Identity.IsAuthenticated && Model.HaEffettuatoOrdine)
                {
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Aggiungi una recensione</h5>
                            @using (Html.BeginForm("ScriviRecensione", "Collezioni", FormMethod.Post))
                            {
                                @Html.HiddenFor(model => model.IdArticolo)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TestoRecensione, "Recensione")
                                    @Html.TextAreaFor(model => model.TestoRecensione, new { @class = "form-control", rows = 4 })
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PunteggioRecensione, "Punteggio")
                                    <select id="PunteggioRecensione" name="PunteggioRecensione" class="form-control">
                                        @for (int i = 1; i <= 10; i++)
                                        {
                                            <option value="@i">@i</option>
                                        }
                                    </select>
                                </div>
                                <button type="submit" class="btn btn-primary mt-2">Invia Recensione</button>
                            }
                        </div>
                    </div>
                }
                else if (User.Identity.IsAuthenticated && !Model.HaEffettuatoOrdine)
                {
                    <div class="alert alert-warning mt-4" role="alert">
                        Devi effettuare un ordine per questo articolo prima di poter lasciare una recensione.
                    </div>
                }
                else
                {
                    <div class="alert alert-info mt-4" role="alert">
                        Per scrivere una recensione, <a href="@Url.Action("Login", "Auth")">effettua l'accesso</a>.
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-danger mt-4" role="alert">
            Articolo non trovato o non disponibile.
        </div>
    }
</div>

<!-- Mostra articoli correlati -->
<h4 class="mt-2">Articoli Correlati</h4>
<div class="row">
    @foreach (var articolo in Model.ArticoliCorrelati)
    {
        <div class="col-lg-2 col-md-4 mb-3">
            <a href="@Url.Action("Details", "Collezioni", new { id = articolo.id })" class="text-decoration-none">
                <img src="@articolo.immagine" class="card-img-top" alt="@articolo.nomearticolo">
                <div class="card-body p-2">
                    <h4 class="custom-h4" style="color: #333; /* Colore testo personalizzato */">@articolo.nomearticolo</h4>
                    @if (articolo.in_offerta.HasValue && articolo.prezzo_offerta.HasValue)
                    {
                        <p class="card-text" style="color: #555; /* Colore testo personalizzato */">
                            <del>Prezzo: @articolo.prezzo €</del><br>
                            <strong>Prezzo in offerta: @articolo.prezzo_offerta €</strong>
                        </p>
                    }
                    else
                    {
                        <p class="card-text" style="color: #555; /* Colore testo personalizzato */">Prezzo: @articolo.prezzo €</p>
                    }
                </div>
            </a>
        </div>
    }
</div>


<!-- Aggiungi jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    function aggiungiAlCarrello() {
        var id = $('#id').val();
        var quantita = $('#quantita').val();

        $.ajax({
            type: "POST",
            url: '/Carrello/AggiungiAlCarrello',
            data: {
                id: id,
                quantita: quantita
            },
            success: function (response) {
                // Aggiorna il contatore nel badge indipendentemente dal successo o meno
                var currentCount = parseInt($('#carrelloCounter').text().trim()) || 0;
                var newCount = currentCount + parseInt(quantita);
                $('#carrelloCounter').text(newCount);
            },
            error: function (xhr, status, error) {
                console.error("Si è verificato un errore durante l'aggiunta dell'articolo al carrello.");
            }
        });
    }



    function renderStars(score) {
        let starsHtml = '';
        const maxStars = 10;
        for (let i = 1; i <= maxStars; i++) {
            if (i <= score) {
                starsHtml += '<i class="bi bi-star-fill text-warning"></i>';
            } else {
                starsHtml += '<i class="bi bi-star text-warning"></i>';
            }
        }
        return starsHtml;
    }

    document.addEventListener('DOMContentLoaded', function () {
        const renderStarsElements = document.querySelectorAll('.render-stars');
        renderStarsElements.forEach(function (element) {
            const score = parseInt(element.dataset.score, 10);
            element.innerHTML = renderStars(score);
        });
    });

</script>
