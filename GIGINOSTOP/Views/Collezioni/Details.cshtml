@model GIGINOSTOP.Models.DettaglioArticoloViewModel

@{
    ViewBag.Title = "Dettagli Articolo";
}

<div class="container">
    <h2>Dettagli Articolo</h2>

    @if (Model != null && Model.Articolo != null)
    {
        <div class="row">
            <!-- Immagine a sinistra -->
            <div class="col-lg-4 mb-3">
                <div class="image-container">
                    <img src="@Model.Articolo.immagine" alt="@Model.Articolo.nomearticolo" class="img-fluid">
                </div>
            </div>

            <!-- Descrizione a destra -->
            <div class="col-lg-8 mb-3">
                <div class="details-container">
                    <h3>@Model.Articolo.nomearticolo</h3>
                    <p>@Model.Articolo.descrizione</p>

                    <!-- Form per l'aggiunta al carrello -->
                    @using (Html.BeginForm("AggiungiAlCarrello", "Carrello", FormMethod.Post, new { id = "aggiungiAlCarrelloForm" }))
                    {
                        @Html.Hidden("id", Model.Articolo.id)
                        <label for="quantita">Quantità:</label>
                        <input type="number" name="quantita" id="quantita" value="1" min="1" required class="form-control">
                        <button type="button" onclick="aggiungiAlCarrello()" class="btn btn-primary mt-3">
                            Aggiungi al Carrello
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="price-container mt-3">
            @if (Model.Articolo.in_offerta.HasValue && Model.Articolo.prezzo_offerta.HasValue)
            {
                <p>
                    <del>Prezzo: @Model.Articolo.prezzo €</del><br>
                    <strong>Prezzo in offerta: @Model.Articolo.prezzo_offerta €</strong>
                </p>
            }
            else
            {
                <p>Prezzo: @Model.Articolo.prezzo €</p>
            }
        </div>

        <!-- Mostra recensioni -->
        <h4>Recensioni</h4>
        if (Model.Recensioni != null && Model.Recensioni.Any())
        {
            <ul>
                @foreach (var recensione in Model.Recensioni)
                {
                    <li>
                        @if (recensione.Utenti != null)
                        {
                            <p><strong>@recensione.Utenti.nome</strong> - @recensione.testo</p>
                            <p>Punteggio: @recensione.punteggio</p>

                            <!-- Mostra il bottone "Elimina" solo se l'utente autenticato è l'autore della recensione -->
                            if (User.Identity.IsAuthenticated && recensione.idutente.ToString() == User.Identity.Name)
                            {
                                <button class="btn btn-danger" onclick="eliminaRecensione(@recensione.id)">Elimina</button>
                            }
                        }
                        else
                        {
                            <p>Recensione anonima - @recensione.testo</p>
                            <p>Punteggio: @recensione.punteggio</p>
                        }
                    </li>
                }
            </ul>
        }
        else
        {
            <p>Non ci sono recensioni per questo articolo.</p>
        }
        <!-- Mostra il form per aggiungere una recensione solo agli utenti autenticati che hanno effettuato un ordine -->
        if (User.Identity.IsAuthenticated && Model.HaEffettuatoOrdine)
        {
            using (Html.BeginForm("ScriviRecensione", "Collezioni", FormMethod.Post))
            {
                @Html.HiddenFor(model => model.IdArticolo)
                <div class="form-group">
                    @Html.LabelFor(model => model.TestoRecensione, "Recensione")
                    @Html.TextAreaFor(model => model.TestoRecensione, new { @class = "form-control", rows = 4 })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PunteggioRecensione, "Punteggio")
                    @Html.DropDownListFor(model => model.PunteggioRecensione, new SelectList(new[] { 1, 2, 3, 4, 5 }), new { @class = "form-control" })
                </div>
                <button type="submit" class="btn btn-primary">Invia Recensione</button>
            }
        }
        else if (User.Identity.IsAuthenticated && !Model.HaEffettuatoOrdine)
        {
            <p>Devi effettuare un ordine per questo articolo prima di poter lasciare una recensione.</p>
        }
        else
        {
            <p>Per scrivere una recensione, <a href="@Url.Action("Login", "Account")">effettua l'accesso</a>.</p>
        }
    }
    else
    {
        <p>Articolo non trovato o non disponibile.</p>
    }
</div>
<!-- Mostra articoli correlati -->
<h4>Articoli Correlati</h4>
<div class="row">
    @foreach (var articolo in Model.ArticoliCorrelati)
    {
        <div class="col-lg-2 col-md-4 mb-3">
            <a href="@Url.Action("Details", "Collezioni", new { id = articolo.id })" class="card-link">
                <div class="card border-0">
                    <img src="@articolo.immagine" class="card-img-top" alt="@articolo.nomearticolo">
                    <div class="card-body p-2">
                        <h5 class="card-title">@articolo.nomearticolo</h5>
                        @if (articolo.in_offerta.HasValue && articolo.prezzo_offerta.HasValue)
                        {
                            <p class="card-text">
                                <del>Prezzo: @articolo.prezzo €</del><br>
                                <strong>Prezzo in offerta: @articolo.prezzo_offerta €</strong>
                            </p>
                        }
                        else
                        {
                            <p class="card-text">Prezzo: @articolo.prezzo €</p>
                        }
                    </div>
                </div>
            </a>
        </div>
    }
</div>

<!-- Aggiungi jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    function aggiungiAlCarrello() {
        var id = $('#id').val();
        var quantita = $('#quantita').val();

        $.ajax({
            type: "POST",
            url: '/Carrello/AggiungiAlCarrello',
            data: {
                id: id,
                quantita: quantita
            },
            success: function (response) {
                // Aggiorna il contatore nel badge indipendentemente dal successo o meno
                var currentCount = parseInt($('#carrelloCounter').text().trim()) || 0;
                var newCount = currentCount + parseInt(quantita);
                $('#carrelloCounter').text(newCount);
            },
            error: function (xhr, status, error) {
                console.error("Si è verificato un errore durante l'aggiunta dell'articolo al carrello.");
            }
        });
    }


    function eliminaRecensione(recensioneId) {
        if (confirm('Sei sicuro di voler eliminare questa recensione?')) {
            $.ajax({
                type: "POST",
                url: '/Collezioni/EliminaRecensione',
                data: {
                    recensioneId: recensioneId
                },
                success: function (response) {
                    // Ricarica la pagina o esegui altre azioni dopo l'eliminazione
                    location.reload(); // Esempio: ricarica la pagina
                },
                error: function (xhr, status, error) {
                    console.error("Si è verificato un errore durante l'eliminazione della recensione.");
                }
            });
        }
    }
</script>
